name: CI Build Step - Deploy Zip to S3

on: 
  workflow_dispatch:
    inputs:
      lambda:
        description: "The lambda to build"
        required: true
        default: "command-handler"
        type: choice
        options:
          - command-handler
          - foreign-command-handler
          - view-materializer
          
env:
  AWS_REGION: us-east-1              
  S3_REPOSITORY: lambdaboilerplate-builds
  TF_VERSION: '1.9.3'
  TG_VERSION: '0.63.6'
  TG_DIR: 'deploy/live/aws/_initializations/lambda-boilerplate'

jobs:
  deploy:
    name: Build zip to S3
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm ci
      - run: npm run build -- src/${{ inputs.lambda }}/index.ts
      - run: npm run postbuild
      - name: Checkout cloud-deployment
        uses: actions/checkout@v4
        with:
          ref: 'feature/aws-lambda-boilerplate-deployment'
          repository: dashg-enterprises/cloud-deployment
          token: ${{ secrets.CLOUD_DEPLOYMENT_PAT }}
          path: deploy
          sparse-checkout: |
            live/aws/_initializations/lambda-boilerplate
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@0e613a0980cbf65ed5b322eb7a1e075d28913a83
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - run: ls -R

      - name: Ensure Bounded Context is initialized
        uses: gruntwork-io/terragrunt-action@v2
        env:
          INPUT_PRE_EXEC_1: |
            git config --global url."https://user:${{secrets.CLOUD_DEPLOYMENT_PAT}}@github.com".insteadOf "https://github.com"
          INPUT_PRE_EXEC_2: |
            git config --global --list
        with:
          TF_VERSION: ${{ env.TF_VERSION }}
          TG_VERSION: ${{ env.TG_VERSION }}
          tg_dir: ${{ env.TG_DIR }}
          tg_command: 'apply --terragrunt-source ../../../../..//iac/initialization'
      - name: Deploy build to bucket
        run: aws s3 cp out/index.zip s3://${{ env.S3_REPOSITORY }}/${{ github.ref_name }}-${{ inputs.lambda }}-${{ github.sha }}.zip
      - name: "Print build id"
        run: echo "### BUILD ID - ${{ github.ref_name }}-${{ inputs.lambda }}-${{ github.sha }}.zip" >> $GITHUB_STEP_SUMMARY